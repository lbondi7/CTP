#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform UniformBufferParticle {
    float deltaTime;
    int particleCount;
    vec2 resolution;
    vec2 randomVec;
} ubp;

struct Particle
{
	vec4 pos;
    vec4 vel;
    float alpha;
    bool goToTri;
    float randDirDur;
    int targetTri;
    vec4 targetPoint;
};

layout(std140, binding = 1) readonly buffer Particles
{
   Particle particles[ ];
};


struct Light
{
   vec4 col;
   vec4 pos;
};

layout(std140, binding = 4) buffer Lights
{
   Light lights[];
};

layout (local_size_x = 256) in;


////////////////////////////////////////////////////////////////////////////////////////////

///////// This code was externally sourced and can be found in the link below //////////////
///////// https://www.iquilezles.org/www/articles/distfunctions/distfunctions.htm //////////

////////////////////////////////////////////////////////////////////////////////////////////

float dot2( vec3 v ) { return dot(v,v); }
float udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )
{
  vec3 ba = b - a; vec3 pa = p - a;
  vec3 cb = c - b; vec3 pb = p - b;
  vec3 ac = a - c; vec3 pc = p - c;
  vec3 nor = cross( ba, ac );

  return sqrt(
    (sign(dot(cross(ba,nor),pa)) +
     sign(dot(cross(cb,nor),pb)) +
     sign(dot(cross(ac,nor),pc))<2.0)
     ?
     min( min(
     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),
     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),
     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )
     :
     dot(nor,pa)*dot(nor,pa)/dot2(nor) );
}

////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////


bool isInside(vec3 pos, vec3 min, vec3 max)
{
    if((pos.x <= max.x && pos.x >= min.x) &&
    (pos.y <= max.y && pos.y >= min.y) &&
    (pos.z <= max.z && pos.z >= min.z))
        return true;

    return false;
}


void main() {    
    uint index = gl_GlobalInvocationID.x;

    if(index >= ubp.particleCount)
        return;

    float dt = ubp.deltaTime;
    dt = clamp(dt, 0.001, 0.1);
    
    vec3 vel = vec3(0, 1, 0);
    float delt =  (1.0 / 60.0);

    vec3 vVel = particles[index].vel.xyz;
    vec3 vPos = particles[index].pos.xyz;


    // if(isInside(vPos, model.min.xyz, model.max.xyz))
    // {
        if(particles[index].goToTri)
        {
            float length1 = length(particles[index].targetPoint.xyz - vPos);
            float length2 = length(particles[index].targetPoint.xyz - (triangles[particles[index].targetTri].normal.xyz * 0.001));
            if(length1 < length2)
            {
                // vec3 norm = triangles[particles[index].targetTri].normal.xyz - triangles[particles[index].targetTri].center.xyz;
                // norm = normalize(norm);
                // vec3 pPos = vPos - triangles[particles[index].targetTri].center.xyz;
                // pPos = normalize(pPos);
                // vec3 dir = cross(norm, pPos);
                // dir  = normalize(dir);
                
                // vec2 rd = ((ubp.randomVec.xy - gl_GlobalInvocationID.xy) / ubp.resolution.xy) / ubp.deltaTime;
                // vec3 dir = vec3(random(rd));
                // dir = normalize(dir);
                // vVel = dir * 10.0;
                particles[index].randDirDur = 0.1;
                particles[index].goToTri = false;
            }
        }
        else
        {
            particles[index].randDirDur -= dt;
            if(particles[index].randDirDur <= 0.0)
            {
                float np = 1000000.0;
                float dist = 0.0;
                for(int i = 0; i < model.triCount; ++i)
                {
                    dist = udTriangle(vPos,triangles[i].vertices[0].xyz, triangles[i].vertices[1].xyz, triangles[i].vertices[2].xyz);
                    if(dist < np)
                    {
                        particles[index].targetPoint = vec4(FindPoint(triangles[i]), 1.0);
                        vVel = normalize(particles[index].targetPoint.xyz - vPos) * 50.0;
                        particles[index].targetTri = i;
                        np = dist;
                    }
                }
                particles[index].goToTri = true;
            }
        }
    // }
    // else
    // {
    //     vVel = normalize(vec3(0) - vPos) * 10.0;
    // }


    vVel = clamp(vVel, -10000, 10000);
    vPos += vVel * dt; 
    vPos = clamp(vPos, -100000, 100000);

    particles[index].vel = vec4(vVel, 0.0);
    particles[index].pos = vec4(vPos, 0.0);
    lights[index].pos = vec4(vPos, 0.0);
}