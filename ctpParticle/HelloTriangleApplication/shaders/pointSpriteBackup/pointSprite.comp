#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform UniformBufferParticle {
    float deltaTime;
    int particleCount;
} ubp;

struct Particle
{
	vec4 pos;
    vec4 vel;
    float alpha;
};

layout(std140, binding = 1) buffer Particles
{
   Particle particles[ ];
};

layout (local_size_x = 256) in;

vec3 getFlowField(vec3 pos)
{
	//glm::vec3 vel = (glm::vec3(-pos.y, pos.x, -pos.x * pos.y) / std::sqrt((pos.x * pos.x) + (pos.y * pos.y) + (pos.z * pos.z)));
	vec3 vel = vec3(-pos.y, pos.x, pos.x) / sqrt((pos.x * pos.x) + (pos.y * pos.y) + (pos.z * pos.z));
	//glm::vec3 vel = (glm::vec3(-pos.y, pos.x, 0) / std::sqrt((pos.x * pos.x) + (pos.y * pos.y)));
    //vec3 vel = vec3(0.0);
	//vel.x = sqrt((pos.x * pos.x) + (pos.y * pos.y));
	//vel.y = 0;
	//vel.z = 0;

	return vel;
}

void main() {    

    uint index = gl_GlobalInvocationID.x;

    if(index >= ubp.particleCount)
        return;

    float dt = ubp.deltaTime;
    dt = clamp(dt, 0.001, 0.1);
    
    vec3 vel = vec3(0, 1, 0);
    float delt =  (1.0 / 60.0);

    vec3 vVel = particles[index].vel.xyz;
    vec3 vPos = particles[index].pos.xyz;

    //vPos += vel * delt; 

    vPos += getFlowField(vPos) * dt * 100.0; 
    // if(vPos.x > 100000.0)
    //     vPos.x = 10.0;

    // if(vPos.y > 100000.0)
    //     vPos.y = 10.0;

    // if(vPos.z > 100000.0)
    //     vPos.z = 10.0;

    particles[index].pos = vec4(vPos, 0.0);
}