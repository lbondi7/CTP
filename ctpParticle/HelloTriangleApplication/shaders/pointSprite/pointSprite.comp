#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform UniformBufferParticle {
    float deltaTime;
    int particleCount;
} ubp;

struct Particle
{
	vec4 pos;
    vec4 vel;
    float alpha;
    bool goToTri;
    float randDirDur;
};

layout(std140, binding = 1) buffer Particles
{
   Particle particles[ ];
};

layout(binding = 2) uniform FfModel {
    int triCount;
    int vertexPerTri;
} model;

struct Triangle
{
	vec4 center;
	vec4 normal;
	vec4 localVertices[3];
	vec4 vertices[3];
	vec4 edges[3];
	vec4 other_edge;
	vec4 min;
	vec4 max;
};

layout(std140, binding = 3) buffer Trianlges
{
   Triangle triangles[];
};

layout (local_size_x = 256) in;

vec3 getFlowField(vec3 pos)
{
	//glm::vec3 vel = (glm::vec3(-pos.y, pos.x, -pos.x * pos.y) / std::sqrt((pos.x * pos.x) + (pos.y * pos.y) + (pos.z * pos.z)));
	vec3 vel = vec3(-pos.y, pos.x, pos.x) / sqrt((pos.x * pos.x) + (pos.y * pos.y) + (pos.z * pos.z));
	//glm::vec3 vel = (glm::vec3(-pos.y, pos.x, 0) / std::sqrt((pos.x * pos.x) + (pos.y * pos.y)));
    //vec3 vel = vec3(0.0);
	//vel.x = sqrt((pos.x * pos.x) + (pos.y * pos.y));
	//vel.y = 0;
	//vel.z = 0;

	return vel;
}

float dot2( vec3 v ) { return dot(v,v); }
float udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )
{
  vec3 ba = b - a; vec3 pa = p - a;
  vec3 cb = c - b; vec3 pb = p - b;
  vec3 ac = a - c; vec3 pc = p - c;
  vec3 nor = cross( ba, ac );

  return sqrt(
    (sign(dot(cross(ba,nor),pa)) +
     sign(dot(cross(cb,nor),pb)) +
     sign(dot(cross(ac,nor),pc))<2.0)
     ?
     min( min(
     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),
     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),
     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )
     :
     dot(nor,pa)*dot(nor,pa)/dot2(nor) );
}

void main() {    

    uint index = gl_GlobalInvocationID.x;

    if(index >= ubp.particleCount)
        return;

    float dt = ubp.deltaTime;
    dt = clamp(dt, 0.001, 0.1);
    
    vec3 vel = vec3(0, 1, 0);
    float delt =  (1.0 / 60.0);

    vec3 vVel = particles[index].vel.xyz;
    vec3 vPos = particles[index].pos.xyz;

    if(!particles[index].goToTri)
    {

    float np = 1.0 / 0.0;
    float dist = 0;
    for(int i = 0; i < model.triCount; ++i)
    {
        dist = udTriangle(vPos, vec3(triangles[i].vertices[0]), vec3(triangles[i].vertices[1]), vec3(triangles[i].vertices[2]));
        if(dist < np)
        {
            vVel = normalize(vec3(triangles[i].center) - vPos) * 100.0;
            np = dist;
        }
    }
    particles[index].goToTri = true;
    }
    else
    {
        float length1 = length(vec3(triangles[i].center) - vPos);
        float length2 = length(vec3(triangles[i].center) - (vec3(triangles[i].normal) * 0.1));
        if(length1 < length2)
        {


            
            particles[index].goToTri = false;
        }
    }
    //vPos += vel * delt; 

    vPos += vVel * dt; 
    // if(vPos.x > 100000.0)
    //     vPos.x = 10.0;

    // if(vPos.y > 100000.0)
    //     vPos.y = 10.0;

    // if(vPos.z > 100000.0)
    //     vPos.z = 10.0;
    particles[index].vel = vec4(vVel, 0.0);
    particles[index].pos = vec4(vPos, 0.0);
}